[ { "title": "Effective Blockchain", "url": "/posts/effective-blockchain/", "categories": "", "tags": "", "date": "2022-08-01 00:00:00 +0800", "snippet": "" }, { "title": "AWS server website", "url": "/posts/website-hosting/", "categories": "Theory", "tags": "aws", "date": "2022-05-30 07:32:00 +0800", "snippet": "AWS Free TierTo get free website hosting need create our server and Amazon Free Tier is here to help us. Our website for sure doesn’t need big processing capacity, thus we can get a Amazon EC2 machine to host it. We can have 750 hour for month during 12 months!After creating an account, you must be able to see the Aws Management Console.Give a name to your machine and: Select ubuntu as operational system; 64-bit architecture; Allow HTTP traffic and HTTPs traffic from the internet; A free tier can get up to 30GB of SSD, thus we can get 15 GB of space that should be enough to our needs.Now you are ready to create the machine. This process may take 2~7 minutes to be done.Connecting with sshIn the Instances table check if our machine is running:Clicking in the instance with the right button in the mouse select the connect option.In some moment while you was creating your machine, a .pem was downloaded to your machine. Be sure that you know where this file is located. We gonna need it! Ok, after clicking the connect button in the instance pannel, select the SSH client in the option in the top bar. The example is exactly the command that should be copied to the terminal.To run this command you must: Run it in the same folder where your .pem file is located; Have openSSH installed in your pc.This command will open the ubuntu bash in your terminal!Creating a simple websiteDependenciesLet’s configure our machine to host a simple server. Create a folder called server, install nodejs and create a simple website.mkdir serversudo apt install nodejscd server Creating scriptTo learn how to create a cool website you can follow this instructions or, at least for now, you can create a simple index.js file and paste the following code:var http = require('http'); // Import Node.js core modulevar server = http.createServer(function (req, res) { //create web server if (req.url == '/') { //check the URL of the current request // set response header res.writeHead(200, { 'Content-Type': 'text/html' }); // set response content res.write('&lt;html&gt;&lt;body&gt;&lt;p&gt;This is home Page.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'); res.end(); }});server.listen(5000); //6 - listen for any incoming requestsconsole.log('Node.js web server at port 5000 is running..')This piece of code, will print This home Page. everytime a person access the Amazon url in port 5000.Now, let’s execute the server:node server.jsAccessing the websiteGetting back to the instances pannel you can get the website url and let’s try to access it:Don’t forget to input the port in the url:ec2-xx-xxx-xxx-xxx.compute-1.amazonaws.com:5000Probably you weren’t able to access your website. Actually, we need to open the port to the exterior so we can access the website in the port 5000. The next section is dedicated to solve this “problem”.Port permissionsCreating a security groupTo open a port to the exterior, the network security options in the lateral menu and create a security group.Inside the security group add an inbound rule and add the following rule:Updating instance security groupBack to the instances pannel, select the option to change the security groups and add the recently created security group.The port 80This section was based in a stack overflow postThe port 80 is special and is protected by the linux system. Thus, to run a server in port 80, run the following commands:&gt; sudo apt-get install libcap2-bin &gt; sudo setcap cap_net_bind_service=+ep `readlink -f \\`which node\\``This allows you to run a server in the port without having to give root permissions to the application. Even if after running this the program presents errors, follow the steps from the previous sections and configure the port 80. The port 80, though, is already configured in a default rule. Thus, remove the default rule and add your own.Running the website in backgroundTo run the website in background you can follow one of two approaches:Using PM2PM2 is a process manager. You can do a lot of things with this package, but in essence you can initialize and check the status as:npm install -g pm2 # installing pm2 start my_script.js # startpm2 status # check the statusUsing screenscreen -d -m Killing processes in a portIf a process is using port 5000, but you actually don’t know what process it is, so you can kill it, run the command:sudo ss -lptn 'sport = :5000'This should return what is the pid of the process that is using the port 5000. Knowing the pid, you can kill it by running:sudo kill -kill &lt;pid&gt;ConclusionAfter following the last step your serve will be on, until the free plan is over." }, { "title": "Simplified papers", "url": "/posts/papers/", "categories": "Theory", "tags": "", "date": "2022-04-26 07:32:00 +0800", "snippet": "This is a compilation and resume of some papers that I’ve read. Delta State Replication" }, { "title": "Partial order and Lattice explained", "url": "/posts/lattice/", "categories": "Theory", "tags": "distributed systems", "date": "2022-04-26 07:32:00 +0800", "snippet": "This is a simplified explanation for the concepts of partial order and lattice used in distributed systems. The content explained here is deeply based on the sources.MotivationWhen someone is cooking, we must spice the vegetables before cooking them. But some other processes may happen at the same time: while the vegetables are cooking, the dishes may be washed.This is scenario that can be represented by a partial order.Partial Order DefinitionIn our example, we could define a ≺ b, which means: “a must be done before b can be done”.ComparabilityWhen a ≺ b or b ≺ a, we say that a and b are comparable, otherwise they are incomparable and happen in paralalel.Total Order DefinitionIf for every two pairs in a set S are comparable, then we say that S is a totally ordered set. All the pairs have an order.Hasse DiagramsThe Hasse diagrams is convenient graphical representation of a partial order. Since we know that the relation must be reflexive and transitive, we can: Remove the self loops (from the reflexice property); Remove all transitive edges; Remove directions on edges assuming that they are oriented upwards;An utilization example is:Extremal ElementsMaximalAn element a is maximal, if it doesn’t exists a b where a ≺ b. There’s just one maximum element.MinimalAn element a is minimal, if doesn’t exists a b where b ≺ a. Tehre’s just one minimum element.Upper boundConsidering that there’s a set A⊆S and u∈ S. We say that u is the upper bound of A if, {∀a ∈ A, a ≺ u}. An element x is the least upper bound on A if x is the upper bound for A, but is less than all the other upper bounds on A.Lower boundConsidering that there’s a set A⊆S. If l is an element of S, we say that l is the lower bound of A, if {∀a ∈ A, l ≺ a}. Yet, an element x is the greatest lower bound if X is the lower bound for A, but is less than all the other upper bounds on A.Examples1) What are the minimal, maximal, minimum and maximum elements? Maximal: {c,d} Minimal: {a,b}Since there’re no unique minimal and maximal elements, there’re no minimum and maximum elements.2) Give the lower/upper bounds and gld/lub of the sets: {d,e,f}: Lower bound: ⦰, no lub; there is no element that is less than the three elements at the same time. Upper bound: ⦰, no glb; there is no element that is higher than the three elements at the same time. {a,c}: Lower bound: ⦰, no lub; there’s no element that is less than both elements at the same time. Upper bound: {h}, lub: h; h is higher than both elements at the same time. {b,d}: Lower bound: {b}, glb: b Upper bounds: {d,g}, lub: d; because d ≺ g. LatticesThe lattice is a special strucutre, where every pair of elements has a lowest upper bound and a greates lower bound.Thus, to show that a lattice exists, we must find at least one pair that doesn’t have a glb/lub.Sources https://www.dsi.unive.it/~avp/03_AVP_2015.pdf" }, { "title": "Lecture notes", "url": "/posts/lecture-notes/", "categories": "Theory, FEUP", "tags": "distributed systems, database, security, mobile", "date": "2022-04-26 07:32:00 +0800", "snippet": "In this post you can check some of my lecture notes.TBDA - Database TechnologiesNotes from the Database Technologies. In this lecture it’s teached how to manage large databases, namely to tune the physical schema, to optimize SQL queries, to recover systems and to define concurrency policies, as well as to profit from extensions to object manipulation and XML technology.SDLE - Large Scale Distributed SystemNotes from the Large Scale Distributed System lectures. The curricular program can be checked at sigarra.FSI - Computer Security FoundationsNotes from the Computer Security Foundations lectures. The goal of this Curricular Unit is to provide students with an integrated perspective of the foundations of computer security; it aims to give students a broad view of the security aspects inherent to the development and operation of computer systems, setting a context for the technology-specific problems and solutions students encounter in other Curricular Units. The curricular program can be checked at sigarra.CMP - Computer Mobile Programming CMP - Resumo CMP - Slides Resumo da dona Diana" } ]
